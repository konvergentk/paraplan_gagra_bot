import os
import asyncio
import re
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from aiogram import Bot
from fastapi.middleware.cors import CORSMiddleware

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ—Ç TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

CHAT_IDS = list(map(int, os.getenv("TELEGRAM_CHAT_IDS", "").split(",")))
if not CHAT_IDS or CHAT_IDS == [""]:
    raise ValueError("–ù–µ—Ç CHAT_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

app = FastAPI()

origins = [
    "https://paraplangagra.ru",
    "https://paraplangagra.pages.dev",
    "https://www.paraplangagra.ru"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

bot = Bot(token=TOKEN)

class BookingData(BaseModel):
    name: str
    phone: str
    date: str
    message: str = ""

async def send_message(text: str):
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")

@app.post("/send")
async def send_booking(data: BookingData):
    name = data.name.strip()
    phone = data.phone.strip()
    date_str = data.date.strip()
    message = data.message.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
    name_regex = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$")
    if not name_regex.match(name):
        raise HTTPException(status_code=400, detail="–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (7-20 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏)
    phone_regex = re.compile(r"^[\d+\-() ]{7,20}$")
    if not phone_regex.match(phone):
        raise HTTPException(status_code=400, detail="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã (–Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –∏ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞)
    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.now().date()
        current_year = today.year

        if selected_date < today + timedelta(days=1):
            raise HTTPException(status_code=400, detail="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω–µ–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.")
        
        if selected_date.year != current_year:
            raise HTTPException(status_code=400, detail="–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.")
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üõ´ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—ë—Ç!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message or '‚Äî'}"
    )

    asyncio.create_task(send_message(text))
    return {"status": "ok", "message": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"}
